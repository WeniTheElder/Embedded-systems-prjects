
automated fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000084a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013fe  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000884  00000000  00000000  00001e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ad2  00000000  00000000  000026f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  000031c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000688  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000974  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  54:	83 00       	.word	0x0083	; ????
  56:	93 00       	.word	0x0093	; ????
  58:	a3 00       	.word	0x00a3	; ????
  5a:	b3 00       	.word	0x00b3	; ????
  5c:	c3 00       	.word	0x00c3	; ????
  5e:	d3 00       	.word	0x00d3	; ????
  60:	e3 00       	.word	0x00e3	; ????
  62:	f3 00       	.word	0x00f3	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e4       	ldi	r30, 0x4A	; 74
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 21 03 	call	0x642	; 0x642 <main>
  8a:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
#include "ADC_interface.h"
#include "ADC_registers.h"


void ADC_voidInit(u8 copy_u8VrefType){
	switch(copy_u8VrefType){
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	59 f0       	breq	.+22     	; 0xac <ADC_voidInit+0x1a>
  96:	18 f0       	brcs	.+6      	; 0x9e <ADC_voidInit+0xc>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	79 f0       	breq	.+30     	; 0xba <ADC_voidInit+0x28>
  9c:	14 c0       	rjmp	.+40     	; 0xc6 <ADC_voidInit+0x34>
		case ADC_AREF:
		CLEAR_BIT(ADMUX_REGISTER,ADC_REFS0_BIT);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_REFS1_BIT);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	87 b9       	out	0x07, r24	; 7
		break;
  aa:	0d c0       	rjmp	.+26     	; 0xc6 <ADC_voidInit+0x34>
		case ADC_AVCC:
		SET_BIT  (ADMUX_REGISTER,ADC_REFS0_BIT);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_REFS1_BIT);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	87 b9       	out	0x07, r24	; 7
		break;
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <ADC_voidInit+0x34>
		case ADC_INTERNAL_VREF:
		SET_BIT  (ADMUX_REGISTER,ADC_REFS0_BIT);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_REFS1_BIT);
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	//choosing right adjustment 
	CLEAR_BIT(ADMUX_REGISTER,ADC_ADLAR_BIT);
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	87 b9       	out	0x07, r24	; 7
	
	//enable ADC
	SET_BIT  (ADCSRA_REGISTER,ADC_ADEN_BIT);
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	86 b9       	out	0x06, r24	; 6
	
	//disable auto trigger
	CLEAR_BIT(ADCSRA_REGISTER,ADC_ADATE_BIT);
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	86 b9       	out	0x06, r24	; 6
	
	//disable ADC interrupt
	CLEAR_BIT(ADCSRA_REGISTER,ADC_ADIE_BIT);
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	86 b9       	out	0x06, r24	; 6
	
	//setting prescaler to /128
	SET_BIT(ADCSRA_REGISTER,ADC_ADPS2_BIT);
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REGISTER,ADC_ADPS1_BIT);
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REGISTER,ADC_ADPS0_BIT);
  ea:	86 b1       	in	r24, 0x06	; 6
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	86 b9       	out	0x06, r24	; 6
  f0:	08 95       	ret

000000f2 <ADC_u16GetAdcResult>:
	
}
u16  ADC_u16GetAdcResult(u8 copy_u8AdcChannelId){
	switch(copy_u8AdcChannelId){
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	91 05       	cpc	r25, r1
  f8:	08 f0       	brcs	.+2      	; 0xfc <ADC_u16GetAdcResult+0xa>
  fa:	84 c0       	rjmp	.+264    	; 0x204 <ADC_u16GetAdcResult+0x112>
  fc:	fc 01       	movw	r30, r24
  fe:	e6 5d       	subi	r30, 0xD6	; 214
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__tablejump2__>
		case ADC_ADC0:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
 106:	87 b1       	in	r24, 0x07	; 7
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	8d 7f       	andi	r24, 0xFD	; 253
 110:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
 112:	87 b1       	in	r24, 0x07	; 7
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	87 7f       	andi	r24, 0xF7	; 247
 11c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	87 b9       	out	0x07, r24	; 7
		break;
 124:	6f c0       	rjmp	.+222    	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC1:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
 126:	87 b1       	in	r24, 0x07	; 7
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
 12c:	87 b1       	in	r24, 0x07	; 7
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
 132:	87 b1       	in	r24, 0x07	; 7
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 138:	87 b1       	in	r24, 0x07	; 7
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 13e:	87 b1       	in	r24, 0x07	; 7
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	87 b9       	out	0x07, r24	; 7
		break;
 144:	5f c0       	rjmp	.+190    	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC2:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
 146:	87 b1       	in	r24, 0x07	; 7
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
 14c:	87 b1       	in	r24, 0x07	; 7
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
 152:	87 b1       	in	r24, 0x07	; 7
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 158:	87 b1       	in	r24, 0x07	; 7
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 15e:	87 b1       	in	r24, 0x07	; 7
 160:	8f 7e       	andi	r24, 0xEF	; 239
 162:	87 b9       	out	0x07, r24	; 7
		break;
 164:	4f c0       	rjmp	.+158    	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC3:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
 166:	87 b1       	in	r24, 0x07	; 7
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
 16c:	87 b1       	in	r24, 0x07	; 7
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
 172:	87 b1       	in	r24, 0x07	; 7
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 178:	87 b1       	in	r24, 0x07	; 7
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 17e:	87 b1       	in	r24, 0x07	; 7
 180:	8f 7e       	andi	r24, 0xEF	; 239
 182:	87 b9       	out	0x07, r24	; 7
		break;
 184:	3f c0       	rjmp	.+126    	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC4:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
 186:	87 b1       	in	r24, 0x07	; 7
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
 18c:	87 b1       	in	r24, 0x07	; 7
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
 192:	87 b1       	in	r24, 0x07	; 7
 194:	84 60       	ori	r24, 0x04	; 4
 196:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 198:	87 b1       	in	r24, 0x07	; 7
 19a:	87 7f       	andi	r24, 0xF7	; 247
 19c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 19e:	87 b1       	in	r24, 0x07	; 7
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	87 b9       	out	0x07, r24	; 7
		break;
 1a4:	2f c0       	rjmp	.+94     	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC5:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
 1a6:	87 b1       	in	r24, 0x07	; 7
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
 1ac:	87 b1       	in	r24, 0x07	; 7
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
 1b2:	87 b1       	in	r24, 0x07	; 7
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 1b8:	87 b1       	in	r24, 0x07	; 7
 1ba:	87 7f       	andi	r24, 0xF7	; 247
 1bc:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 1be:	87 b1       	in	r24, 0x07	; 7
 1c0:	8f 7e       	andi	r24, 0xEF	; 239
 1c2:	87 b9       	out	0x07, r24	; 7
		break;
 1c4:	1f c0       	rjmp	.+62     	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC6:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
 1c6:	87 b1       	in	r24, 0x07	; 7
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
 1cc:	87 b1       	in	r24, 0x07	; 7
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 1d8:	87 b1       	in	r24, 0x07	; 7
 1da:	87 7f       	andi	r24, 0xF7	; 247
 1dc:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 1de:	87 b1       	in	r24, 0x07	; 7
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	87 b9       	out	0x07, r24	; 7
		break;
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <ADC_u16GetAdcResult+0x112>
		case ADC_ADC7:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
 1e6:	87 b1       	in	r24, 0x07	; 7
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
 1ec:	87 b1       	in	r24, 0x07	; 7
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
 1f2:	87 b1       	in	r24, 0x07	; 7
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
 1f8:	87 b1       	in	r24, 0x07	; 7
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
 1fe:	87 b1       	in	r24, 0x07	; 7
 200:	8f 7e       	andi	r24, 0xEF	; 239
 202:	87 b9       	out	0x07, r24	; 7
		break;
	}
	//start conversion
	SET_BIT(ADCSRA_REGISTER,ADC_ADSC_BIT);
 204:	86 b1       	in	r24, 0x06	; 6
 206:	80 64       	ori	r24, 0x40	; 64
 208:	86 b9       	out	0x06, r24	; 6
	
	//busy wait for the conversion to be done
	while(GET_BIT(ADCSRA_REGISTER,ADC_ADIF_BIT) == 0);
 20a:	34 9b       	sbis	0x06, 4	; 6
 20c:	fe cf       	rjmp	.-4      	; 0x20a <ADC_u16GetAdcResult+0x118>
	
	//clearing the flag manually
	SET_BIT(ADCSRA_REGISTER,ADC_ADIF_BIT);
 20e:	86 b1       	in	r24, 0x06	; 6
 210:	80 61       	ori	r24, 0x10	; 16
 212:	86 b9       	out	0x06, r24	; 6
	
	//returning result
	return (u16)ADC_DATA_REGISTER;
 214:	84 b1       	in	r24, 0x04	; 4
 216:	95 b1       	in	r25, 0x05	; 5
}
 218:	08 95       	ret

0000021a <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_registers.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8DataDirection){
	switch(copy_u8PortId){
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	01 f1       	breq	.+64     	; 0x25e <DIO_voidSetPinDirection+0x44>
 21e:	30 f0       	brcs	.+12     	; 0x22c <DIO_voidSetPinDirection+0x12>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	b1 f1       	breq	.+108    	; 0x290 <DIO_voidSetPinDirection+0x76>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	09 f4       	brne	.+2      	; 0x22a <DIO_voidSetPinDirection+0x10>
 228:	4c c0       	rjmp	.+152    	; 0x2c2 <DIO_voidSetPinDirection+0xa8>
 22a:	08 95       	ret
		case DIO_PORTA:
		if(copy_u8DataDirection == DIO_OUTPUT){
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <DIO_voidSetPinDirection+0x2c>
			SET_BIT(DDRA_REGISTER,copy_u8PinId);
 230:	2a b3       	in	r18, 0x1a	; 26
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_voidSetPinDirection+0x22>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_voidSetPinDirection+0x1e>
 240:	82 2b       	or	r24, r18
 242:	8a bb       	out	0x1a, r24	; 26
 244:	08 95       	ret
		}
		else{
			CLEAR_BIT(DDRA_REGISTER,copy_u8PinId);
 246:	2a b3       	in	r18, 0x1a	; 26
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_voidSetPinDirection+0x38>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_voidSetPinDirection+0x34>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	8a bb       	out	0x1a, r24	; 26
 25c:	08 95       	ret
		}
		break;
		case DIO_PORTB:
		if(copy_u8DataDirection == DIO_OUTPUT){
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	59 f4       	brne	.+22     	; 0x278 <DIO_voidSetPinDirection+0x5e>
			SET_BIT(DDRB_REGISTER,copy_u8PinId);
 262:	27 b3       	in	r18, 0x17	; 23
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_voidSetPinDirection+0x54>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_voidSetPinDirection+0x50>
 272:	82 2b       	or	r24, r18
 274:	87 bb       	out	0x17, r24	; 23
 276:	08 95       	ret
		}
		else{
			CLEAR_BIT(DDRB_REGISTER,copy_u8PinId);
 278:	27 b3       	in	r18, 0x17	; 23
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_voidSetPinDirection+0x6a>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_voidSetPinDirection+0x66>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	87 bb       	out	0x17, r24	; 23
 28e:	08 95       	ret
		}
		break;
		case DIO_PORTC:
		if(copy_u8DataDirection == DIO_OUTPUT){
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <DIO_voidSetPinDirection+0x90>
			SET_BIT(DDRC_REGISTER,copy_u8PinId);
 294:	24 b3       	in	r18, 0x14	; 20
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_voidSetPinDirection+0x86>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_voidSetPinDirection+0x82>
 2a4:	82 2b       	or	r24, r18
 2a6:	84 bb       	out	0x14, r24	; 20
 2a8:	08 95       	ret
		}
		else{
			CLEAR_BIT(DDRC_REGISTER,copy_u8PinId);
 2aa:	24 b3       	in	r18, 0x14	; 20
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_voidSetPinDirection+0x9c>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_voidSetPinDirection+0x98>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	84 bb       	out	0x14, r24	; 20
 2c0:	08 95       	ret
		}
		break;
		case DIO_PORTD:
		if(copy_u8DataDirection == DIO_OUTPUT){
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <DIO_voidSetPinDirection+0xc2>
			SET_BIT(DDRD_REGISTER,copy_u8PinId);
 2c6:	21 b3       	in	r18, 0x11	; 17
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_voidSetPinDirection+0xb8>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_voidSetPinDirection+0xb4>
 2d6:	82 2b       	or	r24, r18
 2d8:	81 bb       	out	0x11, r24	; 17
 2da:	08 95       	ret
		}
		else{
			CLEAR_BIT(DDRD_REGISTER,copy_u8PinId);
 2dc:	21 b3       	in	r18, 0x11	; 17
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_voidSetPinDirection+0xce>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_voidSetPinDirection+0xca>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	81 bb       	out	0x11, r24	; 17
 2f2:	08 95       	ret

000002f4 <DIO_voidSetPinValue>:
		break;
		
	}
}
void DIO_voidSetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue){
	switch(copy_u8PortId){
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	01 f1       	breq	.+64     	; 0x338 <DIO_voidSetPinValue+0x44>
 2f8:	30 f0       	brcs	.+12     	; 0x306 <DIO_voidSetPinValue+0x12>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	b1 f1       	breq	.+108    	; 0x36a <DIO_voidSetPinValue+0x76>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	09 f4       	brne	.+2      	; 0x304 <DIO_voidSetPinValue+0x10>
 302:	4c c0       	rjmp	.+152    	; 0x39c <DIO_voidSetPinValue+0xa8>
 304:	08 95       	ret
		case DIO_PORTA:
		if(copy_u8PinValue == DIO_HIGH){
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	59 f4       	brne	.+22     	; 0x320 <DIO_voidSetPinValue+0x2c>
			SET_BIT(PORTA_REGISTER,copy_u8PinId);
 30a:	2b b3       	in	r18, 0x1b	; 27
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_voidSetPinValue+0x22>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_voidSetPinValue+0x1e>
 31a:	82 2b       	or	r24, r18
 31c:	8b bb       	out	0x1b, r24	; 27
 31e:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTA_REGISTER,copy_u8PinId);
 320:	2b b3       	in	r18, 0x1b	; 27
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x38>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x34>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	8b bb       	out	0x1b, r24	; 27
 336:	08 95       	ret
		}
		break;
		case DIO_PORTB:
		if(copy_u8PinValue == DIO_HIGH){
 338:	41 30       	cpi	r20, 0x01	; 1
 33a:	59 f4       	brne	.+22     	; 0x352 <DIO_voidSetPinValue+0x5e>
			SET_BIT(PORTB_REGISTER,copy_u8PinId);
 33c:	28 b3       	in	r18, 0x18	; 24
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_voidSetPinValue+0x54>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_voidSetPinValue+0x50>
 34c:	82 2b       	or	r24, r18
 34e:	88 bb       	out	0x18, r24	; 24
 350:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTB_REGISTER,copy_u8PinId);
 352:	28 b3       	in	r18, 0x18	; 24
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_voidSetPinValue+0x6a>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_voidSetPinValue+0x66>
 362:	80 95       	com	r24
 364:	82 23       	and	r24, r18
 366:	88 bb       	out	0x18, r24	; 24
 368:	08 95       	ret
		}
		break;
		case DIO_PORTC:
		if(copy_u8PinValue == DIO_HIGH){
 36a:	41 30       	cpi	r20, 0x01	; 1
 36c:	59 f4       	brne	.+22     	; 0x384 <DIO_voidSetPinValue+0x90>
			SET_BIT(PORTC_REGISTER,copy_u8PinId);
 36e:	25 b3       	in	r18, 0x15	; 21
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_voidSetPinValue+0x86>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_voidSetPinValue+0x82>
 37e:	82 2b       	or	r24, r18
 380:	85 bb       	out	0x15, r24	; 21
 382:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTC_REGISTER,copy_u8PinId);
 384:	25 b3       	in	r18, 0x15	; 21
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_voidSetPinValue+0x9c>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_voidSetPinValue+0x98>
 394:	80 95       	com	r24
 396:	82 23       	and	r24, r18
 398:	85 bb       	out	0x15, r24	; 21
 39a:	08 95       	ret
		}
		break;
		case DIO_PORTD:
		if(copy_u8PinValue == DIO_HIGH){
 39c:	41 30       	cpi	r20, 0x01	; 1
 39e:	59 f4       	brne	.+22     	; 0x3b6 <DIO_voidSetPinValue+0xc2>
			SET_BIT(PORTD_REGISTER,copy_u8PinId);
 3a0:	22 b3       	in	r18, 0x12	; 18
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_voidSetPinValue+0xb8>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_voidSetPinValue+0xb4>
 3b0:	82 2b       	or	r24, r18
 3b2:	82 bb       	out	0x12, r24	; 18
 3b4:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTD_REGISTER,copy_u8PinId);
 3b6:	22 b3       	in	r18, 0x12	; 18
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_voidSetPinValue+0xce>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_voidSetPinValue+0xca>
 3c6:	80 95       	com	r24
 3c8:	82 23       	and	r24, r18
 3ca:	82 bb       	out	0x12, r24	; 18
 3cc:	08 95       	ret

000003ce <PRV_voidLcdEnable>:
#include "bit_math.h"


//private functions
void PRV_voidLcdEnable(void){
	DIO_voidSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_HIGH);
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	8f e9       	ldi	r24, 0x9F	; 159
 3da:	9f e0       	ldi	r25, 0x0F	; 15
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <PRV_voidLcdEnable+0xe>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <PRV_voidLcdEnable+0x14>
 3e2:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_LOW);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
 3ee:	08 95       	ret

000003f0 <PRV_voidWriteHalfPort>:
}
void PRV_voidWriteHalfPort(u8 copy_u8Data){
 3f0:	cf 93       	push	r28
 3f2:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Data,0));
 3f4:	48 2f       	mov	r20, r24
 3f6:	41 70       	andi	r20, 0x01	; 1
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Data,1));
 400:	c1 fb       	bst	r28, 1
 402:	44 27       	eor	r20, r20
 404:	40 f9       	bld	r20, 0
 406:	64 e0       	ldi	r22, 0x04	; 4
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Data,2));
 40e:	c2 fb       	bst	r28, 2
 410:	44 27       	eor	r20, r20
 412:	40 f9       	bld	r20, 0
 414:	65 e0       	ldi	r22, 0x05	; 5
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Data,3));
 41c:	c3 fb       	bst	r28, 3
 41e:	44 27       	eor	r20, r20
 420:	40 f9       	bld	r20, 0
 422:	66 e0       	ldi	r22, 0x06	; 6
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
}
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <LCD_voidSendCommand>:
	
	LCD_voidSendCommand(0B00000110);
	
	
}
void LCD_voidSendCommand(u8 copy_u8Command){
 42e:	cf 93       	push	r28
 430:	c8 2f       	mov	r28, r24
	//setting RS to command register and RW to write
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	//sending MSB of data to the LCD
	PRV_voidWriteHalfPort(copy_u8Command>>4);
 446:	8c 2f       	mov	r24, r28
 448:	82 95       	swap	r24
 44a:	8f 70       	andi	r24, 0x0F	; 15
 44c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <PRV_voidWriteHalfPort>
	//enabling LCD
	PRV_voidLcdEnable();
 450:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PRV_voidLcdEnable>
	//sending LSB of data to the LCD
	PRV_voidWriteHalfPort(copy_u8Command);
 454:	8c 2f       	mov	r24, r28
 456:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <PRV_voidWriteHalfPort>
	//enabling LCD
	PRV_voidLcdEnable();
 45a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PRV_voidLcdEnable>
}
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <LCD_voidInit>:
}


//public functions
void LCD_voidInit(void){
	DIO_voidSetPinDirection(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_OUTPUT);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_OUTPUT);
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_OUTPUT);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	64 e0       	ldi	r22, 0x04	; 4
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_OUTPUT);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	65 e0       	ldi	r22, 0x05	; 5
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_OUTPUT);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	66 e0       	ldi	r22, 0x06	; 6
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	83 ef       	ldi	r24, 0xF3	; 243
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <LCD_voidInit+0x4c>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_voidInit+0x56>
 4b8:	00 00       	nop
	
	_delay_ms(40);
	
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	PRV_voidWriteHalfPort(0b0010);
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <PRV_voidWriteHalfPort>
	PRV_voidLcdEnable();
 4d4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PRV_voidLcdEnable>
	LCD_voidSendCommand(0b00101000);
 4d8:	88 e2       	ldi	r24, 0x28	; 40
 4da:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	20 ef       	ldi	r18, 0xF0	; 240
 4e0:	2a 95       	dec	r18
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_voidInit+0x7e>
	
	_delay_us(45);
	
	LCD_voidSendCommand(0B00001111);
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_voidSendCommand>
 4ea:	80 ef       	ldi	r24, 0xF0	; 240
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_voidInit+0x8a>
	
	_delay_us(45);
	
	LCD_voidSendCommand(0B00000001);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	8f e3       	ldi	r24, 0x3F	; 63
 4f8:	9f e1       	ldi	r25, 0x1F	; 31
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_voidInit+0x98>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_voidInit+0x9e>
 500:	00 00       	nop
	
	_delay_ms(2);
	
	LCD_voidSendCommand(0B00000110);
 502:	86 e0       	ldi	r24, 0x06	; 6
 504:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_voidSendCommand>
 508:	08 95       	ret

0000050a <LCD_voidDisplayChar>:
	//sending LSB of data to the LCD
	PRV_voidWriteHalfPort(copy_u8Command);
	//enabling LCD
	PRV_voidLcdEnable();
}
void LCD_voidDisplayChar(u8 copy_u8Data){
 50a:	cf 93       	push	r28
 50c:	c8 2f       	mov	r28, r24
	//setting RS to Data register and RW to write
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	//sending MSB of data to the LCD
	PRV_voidWriteHalfPort(copy_u8Data>>4);
 522:	8c 2f       	mov	r24, r28
 524:	82 95       	swap	r24
 526:	8f 70       	andi	r24, 0x0F	; 15
 528:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <PRV_voidWriteHalfPort>
	//enabling LCD
	PRV_voidLcdEnable();
 52c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PRV_voidLcdEnable>
	//sending LSB of data to the LCD
	PRV_voidWriteHalfPort(copy_u8Data);
 530:	8c 2f       	mov	r24, r28
 532:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <PRV_voidWriteHalfPort>
	//enabling LCD
	PRV_voidLcdEnable();
 536:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PRV_voidLcdEnable>
}
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_voidDisplayString>:
void LCD_voidDisplayString(u8* copy_u8Data){
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	8c 01       	movw	r16, r24
	u8 local_u8Char = copy_u8Data[0];
 548:	fc 01       	movw	r30, r24
 54a:	c0 81       	ld	r28, Z
	u8 local_u8pointer = 0;
 54c:	d0 e0       	ldi	r29, 0x00	; 0
	while(local_u8Char != '\0'){
 54e:	08 c0       	rjmp	.+16     	; 0x560 <LCD_voidDisplayString+0x22>
		local_u8Char = copy_u8Data[local_u8pointer];
 550:	f8 01       	movw	r30, r16
 552:	ed 0f       	add	r30, r29
 554:	f1 1d       	adc	r31, r1
 556:	c0 81       	ld	r28, Z
		LCD_voidDisplayChar(local_u8Char);
 558:	8c 2f       	mov	r24, r28
 55a:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_voidDisplayChar>
		++local_u8pointer;
 55e:	df 5f       	subi	r29, 0xFF	; 255
	PRV_voidLcdEnable();
}
void LCD_voidDisplayString(u8* copy_u8Data){
	u8 local_u8Char = copy_u8Data[0];
	u8 local_u8pointer = 0;
	while(local_u8Char != '\0'){
 560:	c1 11       	cpse	r28, r1
 562:	f6 cf       	rjmp	.-20     	; 0x550 <LCD_voidDisplayString+0x12>
		local_u8Char = copy_u8Data[local_u8pointer];
		LCD_voidDisplayChar(local_u8Char);
		++local_u8pointer;
	}	
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number){
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	8b 01       	movw	r16, r22
 57c:	9c 01       	movw	r18, r24
	u32 local_u32ReservedNumber = 1;
	if(copy_u32Number == 0){
 57e:	67 2b       	or	r22, r23
 580:	68 2b       	or	r22, r24
 582:	69 2b       	or	r22, r25
 584:	61 f5       	brne	.+88     	; 0x5de <LCD_voidDisplayNumber+0x70>
		LCD_voidDisplayNumber('0');
 586:	60 e3       	ldi	r22, 0x30	; 48
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidDisplayNumber>
 592:	46 c0       	rjmp	.+140    	; 0x620 <LCD_voidDisplayNumber+0xb2>
	}
	else{
		while(copy_u32Number != 0){
			local_u32ReservedNumber *= 10;
 594:	dc 01       	movw	r26, r24
 596:	cb 01       	movw	r24, r22
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	6c 01       	movw	r12, r24
 5a2:	7d 01       	movw	r14, r26
 5a4:	cc 0c       	add	r12, r12
 5a6:	dd 1c       	adc	r13, r13
 5a8:	ee 1c       	adc	r14, r14
 5aa:	ff 1c       	adc	r15, r15
 5ac:	cc 0c       	add	r12, r12
 5ae:	dd 1c       	adc	r13, r13
 5b0:	ee 1c       	adc	r14, r14
 5b2:	ff 1c       	adc	r15, r15
 5b4:	c8 0e       	add	r12, r24
 5b6:	d9 1e       	adc	r13, r25
 5b8:	ea 1e       	adc	r14, r26
 5ba:	fb 1e       	adc	r15, r27
			local_u32ReservedNumber += copy_u32Number%10;
 5bc:	c9 01       	movw	r24, r18
 5be:	b8 01       	movw	r22, r16
 5c0:	2a e0       	ldi	r18, 0x0A	; 10
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__udivmodsi4>
 5cc:	6c 0d       	add	r22, r12
 5ce:	7d 1d       	adc	r23, r13
 5d0:	8e 1d       	adc	r24, r14
 5d2:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
 5d4:	02 2f       	mov	r16, r18
 5d6:	13 2f       	mov	r17, r19
 5d8:	24 2f       	mov	r18, r20
 5da:	35 2f       	mov	r19, r21
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <LCD_voidDisplayNumber+0x78>
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
	u32 local_u32ReservedNumber = 1;
	if(copy_u32Number == 0){
		LCD_voidDisplayNumber('0');
	}
	else{
		while(copy_u32Number != 0){
 5e6:	01 15       	cp	r16, r1
 5e8:	11 05       	cpc	r17, r1
 5ea:	21 05       	cpc	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	91 f6       	brne	.-92     	; 0x594 <LCD_voidDisplayNumber+0x26>
 5f0:	12 c0       	rjmp	.+36     	; 0x616 <LCD_voidDisplayNumber+0xa8>
			local_u32ReservedNumber *= 10;
			local_u32ReservedNumber += copy_u32Number%10;
			copy_u32Number /= 10;
		}
		while(local_u32ReservedNumber != 1){
			LCD_voidDisplayChar((local_u32ReservedNumber%10)+'0');
 5f2:	2a e0       	ldi	r18, 0x0A	; 10
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__udivmodsi4>
 5fe:	e2 2e       	mov	r14, r18
 600:	f3 2e       	mov	r15, r19
 602:	04 2f       	mov	r16, r20
 604:	15 2f       	mov	r17, r21
 606:	80 e3       	ldi	r24, 0x30	; 48
 608:	86 0f       	add	r24, r22
 60a:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_voidDisplayChar>
			local_u32ReservedNumber /=10;
 60e:	6e 2d       	mov	r22, r14
 610:	7f 2d       	mov	r23, r15
 612:	80 2f       	mov	r24, r16
 614:	91 2f       	mov	r25, r17
		while(copy_u32Number != 0){
			local_u32ReservedNumber *= 10;
			local_u32ReservedNumber += copy_u32Number%10;
			copy_u32Number /= 10;
		}
		while(local_u32ReservedNumber != 1){
 616:	61 30       	cpi	r22, 0x01	; 1
 618:	71 05       	cpc	r23, r1
 61a:	81 05       	cpc	r24, r1
 61c:	91 05       	cpc	r25, r1
 61e:	49 f7       	brne	.-46     	; 0x5f2 <LCD_voidDisplayNumber+0x84>
			LCD_voidDisplayChar((local_u32ReservedNumber%10)+'0');
			local_u32ReservedNumber /=10;
		}
		return;
	}
}
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	df 90       	pop	r13
 62a:	cf 90       	pop	r12
 62c:	08 95       	ret

0000062e <LCD_voidClearLCD>:
void LCD_voidClearLCD(void){
	LCD_voidSendCommand(0b00000001);
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_voidSendCommand>
 634:	8f e3       	ldi	r24, 0x3F	; 63
 636:	9f e1       	ldi	r25, 0x1F	; 31
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_voidClearLCD+0xa>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <LCD_voidClearLCD+0x10>
 63e:	00 00       	nop
 640:	08 95       	ret

00000642 <main>:
int main(void)
{
	u16 local_u16AdcLogicalValue = 0, local_u16AdcAnalogValue = 0;
	
	//initializing modules
	PWM0_voidInit();
 642:	0e 94 9b 03 	call	0x736	; 0x736 <PWM0_voidInit>
	LCD_voidInit();
 646:	0e 94 31 02 	call	0x462	; 0x462 <LCD_voidInit>
	ADC_voidInit(ADC_AVCC);
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	
	//configuring ADC pins
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);
 650:	40 e0       	ldi	r20, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	//configuring H-bridge pins
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN1,DIO_OUTPUT); //H-bridge IN1
 65a:	41 e0       	ldi	r20, 0x01	; 1
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinValue    (DIO_PORTB,DIO_PIN1,DIO_LOW);
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN2,DIO_OUTPUT); //H-bridge IN2
 66e:	41 e0       	ldi	r20, 0x01	; 1
 670:	62 e0       	ldi	r22, 0x02	; 2
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	DIO_voidSetPinValue    (DIO_PORTB,DIO_PIN2,DIO_HIGH);   
 678:	41 e0       	ldi	r20, 0x01	; 1
 67a:	62 e0       	ldi	r22, 0x02	; 2
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_voidSetPinValue>
	
	//configuring PWM pins
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
 682:	41 e0       	ldi	r20, 0x01	; 1
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 0d 01 	call	0x21a	; 0x21a <DIO_voidSetPinDirection>
	
    while (1) 
    {
		//getting temperature logical value
		local_u16AdcLogicalValue = ADC_u16GetAdcResult(ADC_ADC0);
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_u16GetAdcResult>
		
		//calculating analog value of temperature 
		local_u16AdcAnalogValue  = ((u32)local_u16AdcLogicalValue * 500)/1024;
 692:	9c 01       	movw	r18, r24
 694:	a4 ef       	ldi	r26, 0xF4	; 244
 696:	b1 e0       	ldi	r27, 0x01	; 1
 698:	0e 94 00 04 	call	0x800	; 0x800 <__umulhisi3>
 69c:	6b 01       	movw	r12, r22
 69e:	7c 01       	movw	r14, r24
 6a0:	0b 2e       	mov	r0, r27
 6a2:	ba e0       	ldi	r27, 0x0A	; 10
 6a4:	f6 94       	lsr	r15
 6a6:	e7 94       	ror	r14
 6a8:	d7 94       	ror	r13
 6aa:	c7 94       	ror	r12
 6ac:	ba 95       	dec	r27
 6ae:	d1 f7       	brne	.-12     	; 0x6a4 <main+0x62>
 6b0:	b0 2d       	mov	r27, r0
 6b2:	e6 01       	movw	r28, r12
		
		//displaying temperature on LCD
		LCD_voidDisplayString("temperature:");
 6b4:	80 e6       	ldi	r24, 0x60	; 96
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(local_u16AdcAnalogValue);
 6bc:	c7 01       	movw	r24, r14
 6be:	b6 01       	movw	r22, r12
 6c0:	88 27       	eor	r24, r24
 6c2:	99 27       	eor	r25, r25
 6c4:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidDisplayNumber>
		LCD_voidDisplayString("C");
 6c8:	8d e6       	ldi	r24, 0x6D	; 109
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	89 e6       	ldi	r24, 0x69	; 105
 6d4:	98 e1       	ldi	r25, 0x18	; 24
 6d6:	21 50       	subi	r18, 0x01	; 1
 6d8:	80 40       	sbci	r24, 0x00	; 0
 6da:	90 40       	sbci	r25, 0x00	; 0
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <main+0x94>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <main+0x9e>
 6e0:	00 00       	nop
		_delay_ms(500);
		LCD_voidClearLCD();
 6e2:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_voidClearLCD>
		
		//setting fan(DC motor) speed accroding to temperature
		if(local_u16AdcAnalogValue < 20){
 6e6:	c4 31       	cpi	r28, 0x14	; 20
 6e8:	d1 05       	cpc	r29, r1
 6ea:	18 f4       	brcc	.+6      	; 0x6f2 <main+0xb0>
			PWM0_voidStop();//50 75 85 100
 6ec:	0e 94 ba 03 	call	0x774	; 0x774 <PWM0_voidStop>
 6f0:	cd cf       	rjmp	.-102    	; 0x68c <main+0x4a>
		}
		else if(local_u16AdcAnalogValue >20 && local_u16AdcAnalogValue <25){
 6f2:	c6 01       	movw	r24, r12
 6f4:	45 97       	sbiw	r24, 0x15	; 21
 6f6:	04 97       	sbiw	r24, 0x04	; 4
 6f8:	20 f4       	brcc	.+8      	; 0x702 <main+0xc0>
			PWM0_voidStart(50);
 6fa:	82 e3       	ldi	r24, 0x32	; 50
 6fc:	0e 94 a8 03 	call	0x750	; 0x750 <PWM0_voidStart>
 700:	c5 cf       	rjmp	.-118    	; 0x68c <main+0x4a>
		}
		else if(local_u16AdcAnalogValue >25 && local_u16AdcAnalogValue <30){
 702:	c6 01       	movw	r24, r12
 704:	4a 97       	sbiw	r24, 0x1a	; 26
 706:	04 97       	sbiw	r24, 0x04	; 4
 708:	20 f4       	brcc	.+8      	; 0x712 <main+0xd0>
			PWM0_voidStart(75);
 70a:	8b e4       	ldi	r24, 0x4B	; 75
 70c:	0e 94 a8 03 	call	0x750	; 0x750 <PWM0_voidStart>
 710:	bd cf       	rjmp	.-134    	; 0x68c <main+0x4a>
		}
		else if(local_u16AdcAnalogValue >30 && local_u16AdcAnalogValue <35){
 712:	2f e1       	ldi	r18, 0x1F	; 31
 714:	c2 1a       	sub	r12, r18
 716:	d1 08       	sbc	r13, r1
 718:	84 e0       	ldi	r24, 0x04	; 4
 71a:	c8 16       	cp	r12, r24
 71c:	d1 04       	cpc	r13, r1
 71e:	20 f4       	brcc	.+8      	; 0x728 <main+0xe6>
			PWM0_voidStart(85);
 720:	85 e5       	ldi	r24, 0x55	; 85
 722:	0e 94 a8 03 	call	0x750	; 0x750 <PWM0_voidStart>
 726:	b2 cf       	rjmp	.-156    	; 0x68c <main+0x4a>
		}
		else if(local_u16AdcAnalogValue >35){
 728:	a4 97       	sbiw	r28, 0x24	; 36
 72a:	08 f4       	brcc	.+2      	; 0x72e <main+0xec>
 72c:	af cf       	rjmp	.-162    	; 0x68c <main+0x4a>
			PWM0_voidStart(100);
 72e:	84 e6       	ldi	r24, 0x64	; 100
 730:	0e 94 a8 03 	call	0x750	; 0x750 <PWM0_voidStart>
 734:	ab cf       	rjmp	.-170    	; 0x68c <main+0x4a>

00000736 <PWM0_voidInit>:
#include "pwm0_registers.h"


void PWM0_voidInit (){
	//set fast PWM mode
	SET_BIT(TCCR0_REGISTER,WGM00_BIT);
 736:	83 b7       	in	r24, 0x33	; 51
 738:	80 64       	ori	r24, 0x40	; 64
 73a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REGISTER,WGM01_BIT);
 73c:	83 b7       	in	r24, 0x33	; 51
 73e:	88 60       	ori	r24, 0x08	; 8
 740:	83 bf       	out	0x33, r24	; 51
	//set PWM mode to non inverting
	SET_BIT  (TCCR0_REGISTER,COM01_BIT);
 742:	83 b7       	in	r24, 0x33	; 51
 744:	80 62       	ori	r24, 0x20	; 32
 746:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_REGISTER,COM00_BIT);
 748:	83 b7       	in	r24, 0x33	; 51
 74a:	8f 7e       	andi	r24, 0xEF	; 239
 74c:	83 bf       	out	0x33, r24	; 51
 74e:	08 95       	ret

00000750 <PWM0_voidStart>:
}
void PWM0_voidStart(u8 copy_u8DutyCycle){
	OCR0_REGISTER = (((copy_u8DutyCycle*256)/100)-1);
 750:	98 2f       	mov	r25, r24
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	64 e6       	ldi	r22, 0x64	; 100
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	0e 94 c4 03 	call	0x788	; 0x788 <__divmodhi4>
 75c:	61 50       	subi	r22, 0x01	; 1
 75e:	6c bf       	out	0x3c, r22	; 60
	
	//set prescaller to 64 & start timer
	SET_BIT  (TCCR0_REGISTER,CS00_BIT);
 760:	83 b7       	in	r24, 0x33	; 51
 762:	81 60       	ori	r24, 0x01	; 1
 764:	83 bf       	out	0x33, r24	; 51
	SET_BIT  (TCCR0_REGISTER,CS01_BIT);
 766:	83 b7       	in	r24, 0x33	; 51
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_REGISTER,CS02_BIT);
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	8b 7f       	andi	r24, 0xFB	; 251
 770:	83 bf       	out	0x33, r24	; 51
 772:	08 95       	ret

00000774 <PWM0_voidStop>:
}
void PWM0_voidStop (){
	CLEAR_BIT(TCCR0_REGISTER,CS00_BIT);
 774:	83 b7       	in	r24, 0x33	; 51
 776:	8e 7f       	andi	r24, 0xFE	; 254
 778:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_REGISTER,CS01_BIT);
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	8d 7f       	andi	r24, 0xFD	; 253
 77e:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0_REGISTER,CS02_BIT);
 780:	83 b7       	in	r24, 0x33	; 51
 782:	8b 7f       	andi	r24, 0xFB	; 251
 784:	83 bf       	out	0x33, r24	; 51
 786:	08 95       	ret

00000788 <__divmodhi4>:
 788:	97 fb       	bst	r25, 7
 78a:	07 2e       	mov	r0, r23
 78c:	16 f4       	brtc	.+4      	; 0x792 <__divmodhi4+0xa>
 78e:	00 94       	com	r0
 790:	07 d0       	rcall	.+14     	; 0x7a0 <__divmodhi4_neg1>
 792:	77 fd       	sbrc	r23, 7
 794:	09 d0       	rcall	.+18     	; 0x7a8 <__divmodhi4_neg2>
 796:	0e 94 0f 04 	call	0x81e	; 0x81e <__udivmodhi4>
 79a:	07 fc       	sbrc	r0, 7
 79c:	05 d0       	rcall	.+10     	; 0x7a8 <__divmodhi4_neg2>
 79e:	3e f4       	brtc	.+14     	; 0x7ae <__divmodhi4_exit>

000007a0 <__divmodhi4_neg1>:
 7a0:	90 95       	com	r25
 7a2:	81 95       	neg	r24
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	08 95       	ret

000007a8 <__divmodhi4_neg2>:
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255

000007ae <__divmodhi4_exit>:
 7ae:	08 95       	ret

000007b0 <__udivmodsi4>:
 7b0:	a1 e2       	ldi	r26, 0x21	; 33
 7b2:	1a 2e       	mov	r1, r26
 7b4:	aa 1b       	sub	r26, r26
 7b6:	bb 1b       	sub	r27, r27
 7b8:	fd 01       	movw	r30, r26
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <__udivmodsi4_ep>

000007bc <__udivmodsi4_loop>:
 7bc:	aa 1f       	adc	r26, r26
 7be:	bb 1f       	adc	r27, r27
 7c0:	ee 1f       	adc	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	a2 17       	cp	r26, r18
 7c6:	b3 07       	cpc	r27, r19
 7c8:	e4 07       	cpc	r30, r20
 7ca:	f5 07       	cpc	r31, r21
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__udivmodsi4_ep>
 7ce:	a2 1b       	sub	r26, r18
 7d0:	b3 0b       	sbc	r27, r19
 7d2:	e4 0b       	sbc	r30, r20
 7d4:	f5 0b       	sbc	r31, r21

000007d6 <__udivmodsi4_ep>:
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	1a 94       	dec	r1
 7e0:	69 f7       	brne	.-38     	; 0x7bc <__udivmodsi4_loop>
 7e2:	60 95       	com	r22
 7e4:	70 95       	com	r23
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	9b 01       	movw	r18, r22
 7ec:	ac 01       	movw	r20, r24
 7ee:	bd 01       	movw	r22, r26
 7f0:	cf 01       	movw	r24, r30
 7f2:	08 95       	ret

000007f4 <__tablejump2__>:
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31
 7f8:	05 90       	lpm	r0, Z+
 7fa:	f4 91       	lpm	r31, Z
 7fc:	e0 2d       	mov	r30, r0
 7fe:	09 94       	ijmp

00000800 <__umulhisi3>:
 800:	a2 9f       	mul	r26, r18
 802:	b0 01       	movw	r22, r0
 804:	b3 9f       	mul	r27, r19
 806:	c0 01       	movw	r24, r0
 808:	a3 9f       	mul	r26, r19
 80a:	70 0d       	add	r23, r0
 80c:	81 1d       	adc	r24, r1
 80e:	11 24       	eor	r1, r1
 810:	91 1d       	adc	r25, r1
 812:	b2 9f       	mul	r27, r18
 814:	70 0d       	add	r23, r0
 816:	81 1d       	adc	r24, r1
 818:	11 24       	eor	r1, r1
 81a:	91 1d       	adc	r25, r1
 81c:	08 95       	ret

0000081e <__udivmodhi4>:
 81e:	aa 1b       	sub	r26, r26
 820:	bb 1b       	sub	r27, r27
 822:	51 e1       	ldi	r21, 0x11	; 17
 824:	07 c0       	rjmp	.+14     	; 0x834 <__udivmodhi4_ep>

00000826 <__udivmodhi4_loop>:
 826:	aa 1f       	adc	r26, r26
 828:	bb 1f       	adc	r27, r27
 82a:	a6 17       	cp	r26, r22
 82c:	b7 07       	cpc	r27, r23
 82e:	10 f0       	brcs	.+4      	; 0x834 <__udivmodhi4_ep>
 830:	a6 1b       	sub	r26, r22
 832:	b7 0b       	sbc	r27, r23

00000834 <__udivmodhi4_ep>:
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	5a 95       	dec	r21
 83a:	a9 f7       	brne	.-22     	; 0x826 <__udivmodhi4_loop>
 83c:	80 95       	com	r24
 83e:	90 95       	com	r25
 840:	bc 01       	movw	r22, r24
 842:	cd 01       	movw	r24, r26
 844:	08 95       	ret

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
